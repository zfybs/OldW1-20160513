<?xml version="1.0"?>
<doc>
<assembly>
<name>
eZstd
</name>
</assembly>
<members>
<member name="T:eZstd.BinarySerializer.ZengfyLinkBinder">
	<summary>
 Resolve System.Runtime.Serialization.SerializationException, Message = 
 "Unable to find assembly 'StoreData, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'."
 One solution is to ensure that assembly resides in same directory as acad.exe or revit.exe,
 the other is to implement a class such as this, cf. 
 http://www.codeproject.com/soap/Serialization_Samples.asp
 </summary>
</member><member name="M:eZstd.BinarySerializer.Encode64(System.Object)">
	<summary>
 Encode arbitrary .NET serialisable object 
 into binary data encodes as base64 string.
 </summary>
</member><member name="M:eZstd.BinarySerializer.Decode64(System.String)">
	<summary>
 Decode arbitrary .NET serialisable object 
 from binary data encoded as base64 string.
 </summary>
</member><member name="T:eZstd.BinarySerializer">
	<summary>
 将任意一个有 Serializable标记的类以二进制转换器进行类中所有数据与字符串间的相互序列化。
 即可以将类中的数据（包括数组）序列化为字符，还可以将序列化的字符反序列化为一个类。
 </summary>
</member><member name="T:eZstd.BinarySerializerTest">
	<summary>
 一个测试序列化与反序列化的模块，可以删除。
 </summary>
	<remarks></remarks>
</member><member name="P:eZstd.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:eZstd.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:eZstd.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:eZstd.eZDataGridView.myDataGridView_RowsNumberChanged(System.Object,System.Object)">
	<summary>
 行数改变时的事件：显示行号
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:eZstd.eZDataGridView.RowsResizable(System.Object,System.Windows.Forms.DataGridViewRowsAddedEventArgs)">
	<summary>
 设置新添加的一行的Resizable属性为False
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:eZstd.eZDataGridView.InsertRow(System.Object,System.EventArgs)">
	<summary>
 插入一行
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:eZstd.eZDataGridView.RemoveRow(System.Object,System.EventArgs)">
	<summary>
 移除一行
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:eZstd.eZDataGridView.ToolStripMenuItemRemoveRows_Click(System.Object,System.EventArgs)">
	<summary>
 移除多行
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:eZstd.eZDataGridView.myDataGridView_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 如下按下Ctrl+V，则将表格中的数据粘贴到DataGridView控件中
 </summary>
	<remarks>DataGridView表格的索引：行号：表头为-1，第一行为0，列号：表示行编号的列为-1，第一个数据列的列号为0.
 DataGridView.Rows.Count与DataGridView.Columns.Count均只计算数据区域，而不包含表头与列头。</remarks>
</member><member name="M:eZstd.eZDataGridView.PasteFromTable(System.Int32,System.Int32)">
	<summary> 将表格中的数据粘贴到DataGridView控件中 </summary>
	<param name="startRow">粘贴的起始单元格的行位置</param>
	<param name="startCol">粘贴的起始单元格的列位置</param>
	<remarks>DataGridView表格的索引：行号：表头为-1，第一行为0，列号：表示行编号的列为-1，第一个数据列的列号为0.
 DataGridView.Rows.Count与DataGridView.Columns.Count均只计算数据区域，而不包含表头与列头。总行数包括最后一行空数据行。</remarks>
</member><member name="T:eZstd.eZDataGridView">
	<summary>
 自定义控件：DataGridView，向其中增加了：插入行、删除行、显示行号等功能
 </summary>
	<remarks></remarks>
</member><member name="F:eZstd.LstbxDisplayAndItem.DisplayMember">
	<summary>
 在列表框中进行显示的文本
 </summary>
	<remarks>此常数的值代表此类中代表要在列表框中显示的文本的属性名，即"DisplayedText"</remarks>
</member><member name="F:eZstd.LstbxDisplayAndItem.ValueMember">
	<summary>
 列表框中每一项对应的值（任何类型的值）
 </summary>
	<remarks>此常数的值代表此类中代表列表框中的每一项绑定的数据的属性名，即"Value"</remarks>
</member><member name="M:eZstd.LstbxDisplayAndItem.#ctor(System.String,System.Object)">
	<summary>
 构造函数
 </summary>
	<param name="DisplayedText">用来显示在列表的UI界面中的文本</param>
	<param name="Value">列表项对应的值</param>
	<remarks></remarks>
</member><member name="F:eZstd.LstbxDisplayAndItem.NothingInListBox.None">
	<summary>
 什么也没有选择
 </summary>
	<remarks></remarks>
</member><member name="T:eZstd.LstbxDisplayAndItem.NothingInListBox">
	<summary>
 列表框中用来表示“什么也没有”。
 1、在声明时：listControl控件.Items.Add(New LstbxDisplayAndItem(" 无", NothingInListBox.None))
 2、在选择列表项时：listControl控件.SelectedValue = NothingInListBox.None
 3、在读取列表中的数据时，作出判断：If Not LstbxItem.Value.Equals(NothingInListBox.None) Then ...
 </summary>
	<remarks></remarks>
</member><member name="T:eZstd.LstbxDisplayAndItem">
	<summary>
 用来作为ListControl类的.Add方法中的Item参数的类。通过指定ListControl类的DisplayMember属性，来设置列表框中显示的文本。 
 </summary>
	<remarks>
 保存数据时：
  With ListBoxWorksheetsName
       .DisplayMember = LstbxDisplayAndItem.DisplayMember
       .ValueMember = LstbxDisplayAndItem.ValueMember
       .DataSource = arrSheetsName   '  Dim arrSheetsName(0 To sheetsCount - 1) As LstbxDisplayAndItem
  End With
 提取数据时：
  Try
      Me.F_shtMonitorData = DirectCast(Me.ListBoxWorksheetsName.SelectedValue, Worksheet)
  Catch ex As Exception
      Me.F_shtMonitorData = Nothing
  End Try
 或者是：
  Dim lst As LstbxDisplayAndItem = Me.ComboBoxOpenedWorkbook.SelectedItem
  Try
     Dim Wkbk As Workbook = DirectCast(lst.Value, Workbook)
  Catch ex ...
 </remarks>
</member>
</members>
</doc>